<project name="vue" default="vue" basedir=".">

  <description>
    This build file can build all the VUE sources, as well as package
    them into various jar files useful for testing or test
    distribution.  This including a Mac Finder or Windows Explorer
    double-clickable (runnable) jar file that includes all required
    third party libraries (if java has already been installed on the
    system).  Or it can be run from the command line with:
    
        java -jar VUE.jar
    
    Note that this is really only useful for testing, as it still
    doesn't let us set a VUE icon for the file, or install a JVM if
    one isn't present.  The targets for creating VUE-lib.jar and
    VUE-core.jar are for convenience.  The VUE-lib.jar portion is huge
    and slow to create, whereas VUE-core.jar is just the VUE classes
    and resources, and is quick to create.  This is convenient for
    frequently moving around just VUE-core.jar and running via:

        java -cp VUE-core.jar:VUE-lib.jar tufts.vue.VUE

    Mac Version: a Mac OS X Application directory can be build with
    the mac-dist target. It uses template info in the MacOS directory
    to create build/VUE.app, and then copy the current VUE.jar there,
    at which point it's ready to go as a Mac OS X app.  Just drop the folder
    into /Applications (or wherever you like), double-click it and
    you're off and running.
      test
  </description>

<!-- $Revision: 1.201 $ / $Date: 2010-04-23 20:59:52 $ / $Author: mike $ -->
<!-- $Header: /home/svn/cvs2svn-2.1.1/at-cvs-repo/VUE2/src/build.xml,v 1.201 2010-04-23 20:59:52 mike Exp $ -->

<!-- We want to ignore anything in the environment CLASSPATH variable -->
<property name="build.sysclasspath"      value="ignore"/>


<!-- ==================== File and Directory Names ======================== -->
<!--
  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.
-->
  <property name="version"     value="4.0.0"/>
  <property name="top.dir"     value="./.."/>
  <property name="top"     value=".."/>
  <property name="src"         value="${basedir}"/>
  <!-- property name="build.top"  value="${top}"/ -->
  <property name="build.top"  value="${basedir}"/>
  <property name="build.home"  value="${build.top}/build"/>
  <property name="build.class" value="${build.home}/classes" />
  <property name="dist.home"   value="${basedir}/dist"/>
  <property name="dist.src"    value="${dist.home}/src"/>
  <property name="keystore"	   value="${top.dir}/keystore/keystore.key"/>
  <property name="release.home" value="${basedir}/release"/>
  <property name="lib.home"    value="${top}/lib"/>
  <property name="linux.src"    value="${top}/linux/src"/>
  <property name="linux.class"    value="${top}/linux/classes"/>
  <property name="jnilib.home"    value="${top}/jnilibs"/>	
  <property name="universalstub" value="${top}/universalJavaApplicationStub-0.9.0/src/universalJavaApplicationStub"/>
  <property name="vue-core.jar" value="${build.top}/VUE-core.jar"/>
  <property name="vue-lib.jar"  value="${build.top}/VUE-lib.jar"/>
  <property name="test.home"   value="${top.dir}/test" />
  <property name="test.lib"   value="${test.home}/lib" />
  <property name="junit.jar"   value="${test.lib}/junit.jar" />
  <property name="target.version" value="1.8"/>
  <property name="MacDist" value="MacDist"/>
  <property name="MacDist16" value="MacDist16"/>
  <property name="jre.home" value="/usr/local/atsys/jenkins/jre/jre7"/>
  <property name="nullsoftjre.home" value="/usr/local/atsys/jenkins/jenkins/workspace/VUE/VUE2/Nullsoft-Installer/jre"/>
  <!-- NarraVision.jar is just a copy of VUE.jar.  On the PC, It detects via
       the classpath if it's called anything with "NarraVision" in the
       name to decide if it should run with MIT features -->
  <property name="vue.jar"              value="${build.home}/VUE.jar"/>
  <property name="vueapplet.jar"        value="${build.home}/VUEApplet.jar"/>
	<property name="vueapplet-pack.jar"        value="${build.home}/VUEApplet.pack"/>
  <property name="vue-linux.jar"        value="${build.home}/VUE-linux.jar"/>
  <property name="narravision.jar"      value="${build.home}/NarraVision.jar"/>
	

<!--  ==================== Compilation Control Options ==================== -->
<!--
  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?
  compile.deprecation  Should compilation include the deprecation option?
  compile.optimize     Should compilation include the optimize option?
-->
  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="false"/>

  <!-- runtime arguments for debugging -->
  <property name="vue.args"    value=""/>


<!-- ==================== Compilation Classpath =========================== -->
<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.
-->

  <path id="runtime.classpath">
    <!-- pathelement path="${java.class.path}"/ -->
    <!-- It is important that we do NOT include java.class.path here, as it contains
         everything ANT needs to run, which includes some jar files that overlap
         with what we include ourselves, but of potentially different versions.
         We need to leave that out to be sure our runtime test classpath is exactly
         the same as the classpath we distribute with -->
    <pathelement path="/System/Library/Java"/> <!-- This for MacOSX only -->
    <path refid="thirdparty.jarfiles.classpath"/>  	
    <pathelement path="${build.class}"/>
    <pathelement path="."/>
    <pathelement location="${junit.jar}"/>
  </path>

  <!-- This is the list of 3rd party jar files that VUE uses. -->
  <!-- We have to use a property (as opposed to a fileset) for the
       libraries as we have to preserve the order.  We can't use a filelist
       either (which does preserve order) because we need the list for a
       zipgroupfileset, which requires a string of just the basenames to
       actually create the archive (as opposed to just create a manifest,
       which it mysteriously does unless things are exactly as it wants
       them). -->
  <!-- If we include activation.jar or jhbasic.jar, be sure to manually
       remove signature files from them first (META_INF/SUN_MICR.*), or
       we're DOA.  (It doesn't appear possible to re-bundle them into the
       merge jar file). You'll know you're have this problem if you see
       (this from including jhbasic.jar):
        Exception in thread "main" java.lang.SecurityException:
                no manifest section for signature file entry Javax/help/resources/Constants_zh.class
  -->
  <!-- Notes about individual jar files: -->
  <!-- jlfgr-1_0.jar: Contains Java toolbarButtonGraphics -->
  <!-- castor-0.9.7.jar contains XML, JDO & DAX: we only need the XML in castor-0.9.7-xml.jar -->
  <!-- aclibico-1.0.jar: ImageIO reader service for .ico image files (based on .bmp, for website favicon) -->
  <!-- Have started to move most recently updated libraries to the top, so any overlapping
       sub-libraries will get the latest version (as when jar'd together, first found is what's used).  SMF 8/29/05  -->
  <!-- aclibico-1.0.jar: SMF 2006-03-29; removed for now: is claiming to handle all images types (no just .ico)
       and completely blowing out the java VM when it tries (out of memory)-->
  <!-- 2007-01-01 SMF: updated castor to version castor-1.0.5-xml.jar -->
  <!-- 2007-09-30 SMF: updated castor to version castor-1.1.2.1-xml.jar -->
  <!-- 2009-03-25 SMF: updated castor to version castor-1.3-xml.jar -->
  <!-- 2009-03-25 SMF: updated castor to version castor-1.3-core.jar -->
<!-- 2008-07-23 SMF: added google collections 
  		2009-01-26 MK: Added the gdata client, because of an OSID classpath problem, the gdata stuff uses .getPackage which 
  		in turn uses VUE's classloader instead of the OSID's classloader so the classes need to be in VUE in order
  		to work properly-->
	<property name="applet.jarfiles.names"
		value="castor-1.3-xml.jar"
	/>
	<property name="thirdparty.jarfiles.names.extendedFeatures"
		value="MERLOTOsid-1.0.jar			   
	  		  batik-all.jar
			    quaqua.jar
			    gdata-client-1.0.jar
		  	  gdata-core-1.0.jar
		 	    fop.jar
	  		  saaj-api-unsigned.jar
		      saaj-impl-unsigned.jar		    
		      okiSIDimpl.jar
	        OSIDLoggingPlain-1.0.jar 		 	   
		      jaxrpc-spi-unsigned.jar	   		   
	  	  	fedora-client_2_2.jar
			    axis_1_5_3.jar		 	 
	  		  TuftsOsidProvider.jar
		  	  VUE-Java15.jar
		      XmlfileRepositoryOSID-1.0.jar
		 	    axis-ant.jar 
			    MITAuthenticationTypes.jar
			    MIT-OTS-NO_PROVIDER.jar
			    MITRepositoryTypes.jar
		      MITSearchTypes.jar		       
			    OsidRegistry.jar
			    plugin.jar
		      apple-laf.jar
			    splash.jar
			    xalan.jar
			    mail.jar 
			    googleapi.jar
			    activation_unsigned.jar"/>
  <property name="thirdparty.jarfiles.names"
            value="xercesImpl-2.7.1.jar
                   joscar-0.9.3-bin.jar
                   miglayout-3.7.2-swing.jar
                   jaxrpc-api-unsigned.jar
                   jaxrpc-impl-unsigned.jar
                   okiSID_rc6_1.jar
                   okiOSID-2.0a.jar
                   OsidProvider.jar
                   xerces-2.7.1-xml-apis.jar
                   google-collect-snapshot-20090211.jar
                   json.jar
                   AlchemyAPI.jar
                   calais.jar
                   arq-2.5.3.jar
                   trippi-1.1.2-core.jar
                   commons-httpclient-3.1-beta1.jar
                   commons-lang-2.4.jar
                   castor-1.3-core.jar
                   castor-1.3-xml.jar
                   jaxb-api-unsigned.jar
                   jaxb-impl-unsigned.jar
                   jax-qname-unsigned.jar
                   relaxngDatatype.jar
                   namespace-unsigned.jar
                   xsdlib_unsigned.jar
                   VUE-MacOSX.jar
                   iText-2.1.4.jar
                   twitter4j-core-2.1.0.jar
                   miglayout-3.7.2-swing.jar
                   dom2.jar
                   apache-commons.jar
                   avalon-framework-cvs-20020806.jar
                   commons-codec-1.3.jar
                   commons-discovery.jar
                   commons-logging.jar
                   concurrent.jar
                   cryptix-asn1.jar
                   cryptix32.jar
                   fedoragentypes.jar
                   gnu-getopt-1.0.9.jar
                   icu4j-3_6.jar
                   id.jar
                   jakarta-regexp-1.2.jar
                   jdom.jar
                   jena-2.5.3.jar
                   jhapi.jar
                   jakarta-oro-2.0.8.jar
                   javatar.jar
                   jhbasic_unsigned.jar
                   jlfgr-1_0.jar
                   jnet.jar
                   jsse.jar
                   jxtaid.jar
                   jxtasecurity.jar
                   iri.jar
                   log4j-1.2.12.jar
                   rome-0.9.jar
                   opencsv-1.8.jar
                   saxon6.5.jar
                   servlet.jar
                   smete.jar
                   smeteclient.jar
                   wsdl4j.jar
                   xalan-2.4.1.jar
                   xmlrpc-1.1.jar
                   simplyhtml2.jar
                   gnu-regexp-1.1.4.jar
									 looks-2.1.4.jar
								   VAqua4.jar
                   bsh-core-2.0b4.jar
                   "/>

<!-- added quaqua-filechooser-only.jar to the above on 2006-12-08 MK -->
<!-- added xercesImpl-2.7.1.jar to above 8/18/05 -->
<!-- added xerces-2.7.1-xml-apis.jar to above 8/18/05 -->
<!-- added castor-0.9.7-xml.jar to above 8/18/05 (and removed old castor) -->

<!-- removed xercesImpl.jar (old) from above 8/18/05 -->
<!-- removed xercesImpl-2.2.1.jar (old) from above 8/18/05 -->
<!-- removed xerces-1.2.1.jar (old) from above 8/18/05 -->
<!-- removed xml-apis.jar (old) from above 8/18/05 -->

<!-- removed log4j-1.2.4.jar (old) from above SMF 8/5/05 -->
<!-- removed dom.jar from above (old) SMF 8/8/05 -->
<!-- removed jaxb-xjc.jar from above (old?) SMF 8/8/05 -->
<!-- removed jaxb-libs.jar from above (old?) SMF 8/8/05 -->
<!-- removed jaxrpc.jar from above (old?) SMF 8/8/05 -->
<!-- removed saaj.jar from above (redundant) SMF 8/8/05 -->
<!-- removed MRJAdapter.jar SMF 2006-09-18 -->

                   


     <!-- VUE will actually run with this minimal set of jar files, with the exception
     of adding new OSID-DR datasources (e.g., comet.osidimpl.iTunesDR, if you also
     include iTunesDR.jar).  The error message we get when attempting to do that
     doesn't tell us anything about what it can't find, so we're just going to
     go with the overkill list above.  But it looks like with some vetting, we
     could reduce the size of the distribution to less than half it's current size. -->
     <!--
         Used for exporting to SVG:
                   batik-all.jar
                   

         axis (org.apache.axis)         FEDORA code uses this (tufts/oki/{dr,repository}/fedora)
         saaj (javax.xml.soap)          For SOAP (FEDORA access support)
         fop (org.apache.fop)           For PDFTransform.java
         castor (org.exolab.castor)     For XML persistence support
         dom2 (org.w3c.dom)             For SVGConversion, XMLView & AssetResource
         jaxrpc (javax.xml.rpc)         FEDORA
         xercesImpl.jar                 For SVGConversion (Document/DocumentImpl)  WHICH VERSION??
         
       -->
  <property name="thirdparty.jarfiles.names.minimal"
            value="okiOSID-2.0a.jar
				          joscar-0.9.3-bin.jar
                  apache-commons.jar
                  axis_1_5_3.jar
                  commons-httpclient-3.1-beta1.jar      
				          commons-lang-2.4.jar
                  commons-codec-1.3.jar
                  trippi-1.1.2-core.jar
                  commons-httpclient-3.1-beta1.jar                   
                  batik-all.jar
                  castor-1.3-core.jar
                  castor-1.3-xml.jar
                  commons-discovery.jar
                  commons-logging.jar
                  dom2.jar
                  fedora-client_2_2.jar
                  fedoragentypes.jar
                  fedorautilities.jar
  				        plugin.jar
                  fop.jar
                  googleapi.jar
                  jaxrpc.jar
                  MRJAdapter.jar
                  okiSID_rc6_1.jar
                  saaj.jar
                  xercesImpl-2.7.1.jar
                  xerces-2.7.1-xml-apis.jar
  				        quaqua.jar
		   		        iText-2.1.4.jar 
					        twitter4j-core-2.1.0.jar
		   		        simplyhtml2.jar
		  	 	        gnu-regexp-1.1.4.jar
	   			        looks-2.1.4.jar
  				        google-collect-snapshot-20090211.jar
    	            miglayout-3.7.2-swing.jar
  				        json.jar
				          AlchemyAPI.jar
  	 			        calais.jar
			  	        bsh-core-2.0b4.jar"/>
                                                                                                          
  <path id="compile.classpath.common">

    <!-- Consider sorting these by SIZE as a way to ensure the most
         atomic/newest version of something is included.  This
         assuming we have current versions of everything.  E.g., if
         some big jar includes log4j as an aside, it will have to be
         bigger than the log4j jar, yet it may not contain the most
         recent version.  If we have the most recent version included
         before that, we'll be sure to have all the most current
         libraries at runtime.  -->
    
    <pathelement path="."/>                
    <pathelement path="../"/>                
    <pathelement location="${junit.jar}"/>
    <pathelement path="${lib.home}/google-collect-snapshot-20090211.jar"/>
  	<pathelement path="${lib.home}/XmlfileRepositoryOSID-1.0.jar"/>
  	<pathelement path="${lib.home}/TuftsOsidProvider.jar"/>
  	<pathelement path="${lib.home}/json.jar"/>
  	<pathelement path="${lib.home}/joscar-0.9.3-bin.jar"/>
	  <pathelement path="${lib.home}/AlchemyAPI.jar"/>
  	<pathelement path="${lib.home}/calais.jar"/>
    <pathelement path="${lib.home}/VUE-MacOSX.jar"/>
    <pathelement path="${lib.home}/castor-1.3-core.jar"/>
    <pathelement path="${lib.home}/castor-1.3-xml.jar"/>
 	  <pathelement path="${lib.home}/quaqua.jar"/>
    <pathelement path="${lib.home}/batik-all.jar"/>
    <pathelement path="${lib.home}/fop.jar"/>
    <pathelement path="${lib.home}/plugin.jar"/>
    <pathelement path="${lib.home}/fedoragentypes.jar"/>
    <pathelement path="${lib.home}/fedora-client_2_2.jar"/>
    <pathelement path="${lib.home}/googleapi.jar"/>
    <pathelement path="${lib.home}/arq-2.5.3.jar" />
    <pathelement path="${lib.home}/axis_1_5_3.jar"/>
    <pathelement path="${lib.home}/commons-httpclient-3.1-beta1.jar"/>
    <pathelement path="${lib.home}/trippi-1.1.2-core.jar"/>
    <pathelement path="${lib.home}/axis-ant.jar"/>
    <pathelement path="${lib.home}/commons-lang-2.4.jar"/>
    <pathelement path="${lib.home}/commons-discovery.jar"/>
    <pathelement path="${lib.home}/commons-logging.jar"/>
    <pathelement path="${lib.home}/commons-codec-1.3.jar"/>
    <pathelement path="${lib.home}/jaxrpc.jar"/>
    <pathelement path="${lib.home}/log4j-1.2.12.jar"/>
    <pathelement path="${lib.home}/saaj.jar"/>
    <pathelement path="${lib.home}/MRJAdapter.jar"/>
    <pathelement path="${lib.home}/apple-laf.jar"/>
    <pathelement path="${lib.home}/okiOSID-2.0a.jar" />		
    <pathelement path="${lib.home}/okiSIDImpl.jar" />	
    <pathelement path="${lib.home}/opencsv-1.8.jar" />
    <pathelement path="${lib.home}/MITSearchTypes.jar" />
    <pathelement path="${lib.home}/MITRepositoryTypes.jar" />
    <pathelement path="${lib.home}/OsidProvider.jar" />
    <pathelement path="${lib.home}/OsidRegistry.jar" />
    <pathelement path="${lib.home}/MIT-OTS-NO_PROVIDER.jar" />
    <pathelement path="${lib.home}/jaxb-api.jar" />
    <pathelement path="${lib.home}/jaxb-xjc.jar" />
    <pathelement path="${lib.home}/jaxb-libs.jar" />
    <pathelement path="${lib.home}/jaxp-impl.jar" />
    <pathelement path="${lib.home}/jax-qname.jar" />
    <pathelement path="${lib.home}/relaxngDatatype.jar" />
    <pathelement path="${lib.home}/SessionManager.jar" />
    <pathelement path="${lib.home}/imq.jar" />
    <pathelement path="${lib.home}/jdom.jar" />
	  <pathelement path="${lib.home}/jhapi.jar" />
    <pathelement path="${lib.home}/jnet.jar" />
    <pathelement path="${lib.home}/jsse.jar" />
    <pathelement path="${lib.home}/javatar.jar" />
    <pathelement path="${lib.home}/jms.jar" />
    <pathelement path="${lib.home}/jena-2.5.3.jar" />
    <pathelement path="${lib.home}/namespace.jar" />
    <pathelement path="${lib.home}/xsdlib.jar" />
    <pathelement path="${lib.home}/jaxrpc-api.jar" />
    <pathelement path="${lib.home}/jaxrpc-impl.jar" />
    <pathelement path="${lib.home}/jaxrpc-spi.jar" />
    <pathelement path="${lib.home}/activation.jar" />
    <pathelement path="${lib.home}/mail.jar" />
    <pathelement path="${lib.home}/saaj-api.jar" />
    <pathelement path="${lib.home}/saaj-impl.jar" />
    <pathelement path="${lib.home}/xercesImpl-2.7.1.jar" />
    <pathelement path="${lib.home}/xerces-2.7.1-xml-apis.jar" />
    <pathelement path="${lib.home}/dom.jar" />
    <pathelement path="${lib.home}/rome-0.9.jar" />
    <pathelement path="${lib.home}/iText-2.1.4.jar" />    
    <pathelement path="${lib.home}/miglayout-3.7.2-swing.jar" />    	   
    <pathelement path="${lib.home}/twitter4j-core-2.1.0.jar" />    
    <pathelement path="${lib.home}/simplyhtml2.jar" />   
  	<pathelement path="${lib.home}/looks-2.1.4.jar" />   
  	<pathelement path="${lib.home}/bsh-core-2.0b4.jar" />     	
  	<pathelement path="${lib.home}/gdata-client-1.0.jar" />
  	<pathelement path="${lib.home}/gdata-core-1.0.jar" />
    <pathelement path="${lib.home}/gnu-regexp-1.1.4.jar"/>
    <!-- I'm not sure it's safe to include a prior build's class files in the current build's
         classpath - can we remove this? SMF 8/5/05.
      If we were to require this, the build would never work from scratch! -->
    <!-- pathelement path="${lib.home}/tufts/VUE-core.jar" / -->
    
    <pathelement path="${lib.home}/activation.jar" />
    <pathelement path="${lib.home}/axis-ant.jar" />
    <pathelement path="${lib.home}/axis_1_5_3.jar" />
    <pathelement path="${lib.home}/commons-discovery.jar" />
    <pathelement path="${lib.home}/commons-httpclient.jar" />
    <pathelement path="${lib.home}/commons-logging.jar" />
    <pathelement path="${lib.home}/cryptix-asn1.jar" />
    <pathelement path="${lib.home}/cryptix32.jar" />
    <pathelement path="${lib.home}/dom2.jar"/>
    <pathelement path="${lib.home}/jaxrpc.jar" />
    <pathelement path="${lib.home}/jdom.jar" />
    <pathelement path="${lib.home}/jms.jar" />
    <pathelement path="${lib.home}/jxtaid.jar" />
    <pathelement path="${lib.home}/jxtasecurity.jar" />
    <pathelement path="${lib.home}/saaj.jar" />	
    <pathelement path="${lib.home}/xalan.jar" />

    <pathelement path="${lib.home}/commons-httpclient-2.0.jar" />
    <pathelement path="${lib.home}/commons-logging.jar" />
    <pathelement path="${lib.home}/jdom.jar" />
    <pathelement path="${lib.home}/jnet.jar" />
    <pathelement path="${lib.home}/jsse.jar" />
  </path>
    
  <path id="compile.classpath.google">
    <path refid="compile.classpath.common"/>
  </path>


  <path id="compile.classpath.oki">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/okiSID_rc6_1.jar"/>
    <pathelement path="${lib.home}/okiOSID-2.0a.jar"/>
    <pathelement path="${lib.home}/xercesImpl-2.7.1.jar" />
    <pathelement path="${lib.home}/xerces-2.7.1-xml-apis.jar" />
    <pathelement path="${lib.home}/apache-commons.jar"/>
    
  </path>

  <path id="compile.classpath.oki2">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/okiOSID-2.0a.jar"/>
    <pathelement path="${lib.home}/xercesImpl-2.7.1.jar" />
    <pathelement path="${lib.home}/xerces-2.7.1-xml-apis.jar" />
    <pathelement path="${lib.home}/apache-commons.jar"/>
    
  </path>

  <path id="compile.classpath.oki1and2">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/okiSID_rc6_1.jar"/>
    <pathelement path="${lib.home}/okiOSID-2.0a.jar"/>
    <pathelement path="${lib.home}/xercesImpl-2.7.1.jar" />
    <pathelement path="${lib.home}/xerces-2.7.1-xml-apis.jar" />
    <pathelement path="${lib.home}/apache-commons.jar"/>
    
  </path>

  <path id="compile.classpath.vue">
    <path refid="compile.classpath.common"/>
    <pathelement path="${lib.home}/okiSID_rc6_1.jar"/>
    <pathelement path="${lib.home}/okiOSID-2.0a.jar"/>
    <pathelement path="${lib.home}/xercesImpl-2.7.1.jar" />
    <pathelement path="${lib.home}/xerces-2.7.1-xml-apis.jar" />
    <pathelement path="${lib.home}/apache-commons.jar"/>
    <!-- pathelement path="${lib.home}/MRJAdapter.jar"/ not working, unknown why -->
  </path>


<!-- ==================== Prepare Target ================================== -->
<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.
-->

  <target name="prepare">
  
    <copy file="${basedir}/edu/tufts/osidimpl/repository/artifact/artifact.xml" todir="${build.class}/edu/tufts/osidimpl/repository/artifact" verbose="true"/>
    <copy file="${basedir}/edu/tufts/osidimpl/repository/artifact/artifact_result.xml" todir="${build.class}/edu/tufts/osidimpl/repository/artifact" verbose="true"/>
    <copy file="${basedir}/edu/tufts/osidimpl/repository/artifact/artifact_result_title.xml" todir="${build.class}/edu/tufts/osidimpl/repository/artifact" verbose="true"/>
    <copy file="${basedir}/edu/tufts/osidimpl/repository/artifact/artifact_result_artist.htm" todir="${build.class}/edu/tufts/osidimpl/repository/artifact" verbose="true"/>

    <!-- Determine if Java 1.4 is available on this machine -->
    <condition property="java1.4.present"> 
      <equals arg1="${ant.java.version}" arg2="1.4" /> 
    </condition>
    
    <!-- Set Ant batch file based on test for platform -->
    <condition property="ant.exec" value="ant.bat"> 
      <os family="windows"/>
    </condition>
    <condition property="ant.exec" value="ant"> 
      <not>
        <os family="windows"/>
      </not>
    </condition>
    <mkdir dir="${build.class}"/>
    <mkdir dir="${linux.class}"/>
    <tstamp />
  </target>


<!-- ==================== compile Task ================================ -->
  <target name="compile-linux" depends="compile,prepare,version">

    <!--
    
   <javac srcdir="${linux.src}"
   	  destdir="${linux.class}"
   	  debug="${compile.debug}"
   	  deprecation="${compile.deprecation}"
   	  optimize="${compile.optimize}"
   	  listfiles="no"
   	  classpath="${lib.home}/VUE-MacOSX.jar:${lib.home}/log4j-1.2.12.jar:${build.class}"
   	  source="${target.version}"
   	  target="${target.version}"
   	  verbose="true"
   	  >
   	  <include name="tufts/vue/gui/*.java"/>
    </javac>

   -->
    
  </target>
  <target name="compile" depends="prepare,version"
    description="Compile Java sources using default javac">
   

    <javac srcdir="${basedir}"
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           source="${target.version}"
           target="${target.version}"
           encoding="utf-8"
           >
      <classpath refid="compile.classpath.oki1and2"/>
      <include name="tufts/vue/OsidAsset*.java"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>
    
    <javac srcdir="${basedir}" 
           destdir="${build.class}"
              debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           source="${target.version}"
           target="${target.version}"
           >
      <classpath refid="compile.classpath.google"/>
      <include name="tufts/google/*.java"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>

    <javac srcdir="${basedir}" 
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           source="${target.version}"
           target="${target.version}"
           >
      <classpath refid="compile.classpath.oki"/>
      <include name="tufts/oki/**/*.java"/>
    </javac>

    <javac srcdir="${basedir}" 
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           source="${target.version}"
           target="${target.version}"
           >
      <classpath refid="compile.classpath.oki2"/>
      <include name="tufts/oki/repository/fedora/*.java"/>
      <include name="tufts/osid/types/*.java"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>

    <javac srcdir="${basedir}" 
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           source="${target.version}"
           target="${target.version}"
           >
      <classpath refid="compile.classpath.vue"/>
      <include name="tufts/artifact/*.java"/>
      <include name="tufts/googleapi/*.java"/>
      <include name="tufts/vue/**/*.java"/>
      <exclude name="tufts/vue/OsidAsset*.java"/>
      <exclude name="**/macosx/**"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>

    <javac srcdir="${basedir}" 
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           source="${target.version}"
           target="${target.version}"
           >
      <classpath refid="compile.classpath.vue"/>
      <include name="edu/**/*.java"/>
      <include name="org/**/*.java"/>
      <exclude name="**/macosx/**"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>
     <javac srcdir="${basedir}"
           destdir="${build.class}"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="no"
           classpath="${lib.home}/VUE-MacOSX.jar:${lib.home}/log4j-1.2.12.jar"
           source="${target.version}"
           target="${target.version}"
           verbose="false"
           >
      <!--classpath refid="compile.cfedoraasspath.vue"/-->
      <include name="tufts/*.java"/>
      <include name="test/**/*.java"/>
      <exclude name="**/tmp/**"/>
      <exclude name="**/bak/**"/>
      <exclude name="**/old/**"/>
    </javac>

  </target>

  
  <!-- Create a classpath based on all the 3rd party jarfiles -->
  <path id="thirdparty.jarfiles.classpath">
    <filelist dir="${lib.home}" files="${thirdparty.jarfiles.names}"/>
    <filelist dir="${lib.home}" files="${thirdparty.jarfiles.names.extendedFeatures}"/>
  </path>

<!-- ==================== Vue JAR files ================================ -->
  <target name="jar-types"  
          depends="compile"
          description="Create OSID Types jar">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/TuftsOSIDTypes.jar"/>
    <jar zipfile="dist/lib/osid/TuftsOSIDTypes.jar" update="true" compress="false" index="true">
      <fileset dir="${build.class}" includes="tufts/osid/types/**"/>
    </jar>
  </target>

<!-- ==================== Vue JAR files ================================ -->
  <target name="jar-repository"  
          depends="compile"
          description="Create TuftsDigitalLibraryOSID.jar containing all supporting files">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/TuftsDigitalLibraryOSID.jar"/>
    <jar zipfile="dist/lib/osid/TuftsDigitalLibraryOSID.jar" update="true" compress="false" index="true">
      <fileset dir="${src}" includes="vue.conf"/>
      <fileset dir="${src}" includes="tufts/vue/VueResources.properties"/>
      <fileset dir="${src}" includes="tufts/oki/repository/fedora/RepositoryManager.properties"/>
      <fileset dir="${src}" includes="tufts/oki/repository/fedora/fedora.conf"/>
      <fileset dir="${build.class}" includes="tufts/oki/repository/**"/>
      <fileset dir="${build.class}" includes="tufts/oki/id/**"/>
      <fileset dir="${build.class}" includes="tufts/oki/shared2/**"/>
    </jar>
    <copy file="${lib.home}/fedora-server.jar" todir="dist/lib/osid" verbose="true"/>
  </target>

<!-- ==================== Artifact Data Source ================================ -->
  <target name="jar-artifact"  
          depends="compile"
          description="Create Artifact.jar containing all supporting files">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/TuftsArtifact-1.0.jar"/>
    <jar jarfile="dist/lib/osid/TuftsArtifact-1.0.jar"
         basedir="${build.class}" 
         includes="edu/tufts/osidimpl/repository/artifact/*.*"/>
  </target>

<!-- ==================== Local Files Data Source ================================ -->
  <target name="jar-localfiles"  
          depends="compile"
          description="Create LocalFilesRepository.jar containing all supporting files">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/LocalFilesRepository-1.0.jar"/>
    <jar jarfile="dist/lib/osid/LocalFilesRepository-1.0.jar"
         basedir="${build.class}" 
         includes="edu/tufts/osidimpl/repository/localfiles/*.*"/>
  </target>

<!-- ==================== Google Global Data Source ================================ -->
  <target name="jar-googleglobal"  
          depends="compile"
          description="Create GoogleGlobal.jar containing all supporting files">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/GoogleGlobalRepository-1.0.jar"/>
    <jar jarfile="dist/lib/osid/GoogleGlobalRepository-1.0.jar"
         basedir="${build.class}" 
         includes="edu/tufts/osidimpl/repository/google/global/*.*"/>
  </target>

<!-- ==================== Google Local Data Source ================================ -->
  <target name="jar-googlelocal"  
          depends="compile"
          description="Create GoogleLocal.jar containing all supporting files">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/GoogleLocalRepository-1.0.jar"/>
    <jar jarfile="dist/lib/osid/GoogleLcoalRepository-1.0.jar"
         basedir="${build.class}" 
         includes="edu/tufts/osidimpl/repository/google/local/*.*"/>
  </target>

  
<!-- ==================== Fedora 2.0 Data Source ================================ -->
  <target name="jar-fedora20"  
          depends="compile"
          description="Create Fedora20.jar containing all supporting files">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/Fedora20Repository-1.0.jar"/>
    <jar jarfile="dist/lib/osid/Fedora20Repository-1.0.jar"
         basedir="${build.class}" 
         includes="edu/tufts/osidimpl/repository/fedora_2_0/*.class"/>
    <jar jarfile="dist/lib/osid/Fedora20Repository-1.0.jar"
         basedir="${build.class}" 
		 update="true"
         includes="tufts/oki/id/*.class"/>
    <jar jarfile="dist/lib/osid/Fedora20Repository-1.0.jar"
         basedir="${build.class}" 
		 update="true"
         includes="tufts/oki/shared2/*.class"/>
  </target>

<!-- ==================== Sakai Data Source ================================ -->
  <target name="jar-sakai"  
          depends="compile"
          description="Create SakaiRepository-1.0.jar containing all supporting files">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/SakaiRepository-1.0a.jar"/>
    <jar jarfile="dist/lib/osid/SakaiRepository-1.0a.jar"
         basedir="${build.class}" 
         includes="edu/tufts/osidimpl/repository/sakai/*.class"/>
    <jar jarfile="dist/lib/osid/SakaiRepository-1.0a.jar"
         basedir="${build.class}" 




		 update="true"
         includes="edu/tufts/osidimpl/authentication/sakai/*.class"/>
  </target>

<!-- ==================== Core ================================ -->
  <target name="jar-core"
          depends="compile,compile-linux"
          description="Create VUE-core.jar - a jar file containing all the VUE classes, resources and config files from the CVS tree.">
    <!-- echo message="top.dir is ${top.dir}"/ -->
    <echo message="build.class is ${build.class}"/>
    <antcall target="run-jar-core"/>
  </target>

  <target name="run-jar-core">
    <jar zipfile="${vue-core.jar}" update="false" compress="false" index="true" duplicate="preserve">
      <fileset dir="${src}">
        <!-- exclude data/narravision?  2mb of meta-data... -->
        <exclude name="**/old/**"/>
        <exclude name="**/tmp/**"/>
        <exclude name="altView/**"/>
        <exclude name="build.xml"/>
      	<exclude name="test/**"/>
      	<exclude name="linux/**"/>
      	<exclude name="data.narravision/**"/>
      	<exclude name="MacOS/**"/>      
      	<exclude name="maclib/**"/>
      	<exclude name="java15/**"/>
      	<exclude name="tufts/vue/images/*.ico"/>
      	<exclude name="tufts/vue/images/archived/**"/>
        <include name="**/*.xml"/>
        <include name="**/*.conf"/>
        <include name="**/*.css"/>
        <include name="**/*.rdfs" />
        <include name="**/*.rdf" />
        <include name="**/*.owl" />
        <include name="**/*.properties"/>
        <include name="tufts/vue/resources/**"/>
        <include name="tufts/vue/images/**"/>
        <include name="tufts/vue/gui/icons/**"/>
      </fileset>
      <fileset dir="${build.class}"/>
    </jar>
  </target>
  <target name="jar-core-applet"
     depends="compile,compile-linux"
	 description="Create VUE-core.jar - a jar file containing all the VUE classes, resources and config files from the CVS tree.">
	 <echo message="build.class is ${build.class}"/>
	 <antcall target="run-jar-core-applet"/>
  </target>
  <target name="run-jar-core-applet">
    <jar zipfile="${vue-core.jar}" update="false" compress="true" index="true" duplicate="preserve">
      <fileset dir="${src}">
        <!-- exclude data/narravision?  2mb of meta-data... -->
        <exclude name="**/old/**"/>
        <exclude name="**/tmp/**"/>
        <exclude name="altView/**"/>
        <exclude name="build.xml"/>
      	<exclude name="test/**"/>
      	<exclude name="linux/**"/>
      	<exclude name="data.narravision/**"/>
      	<exclude name="MacOS/**"/>      
      	<exclude name="maclib/**"/>
      	<exclude name="java15/**"/>
        <include name="**/*.xml"/>
        <include name="**/*.conf"/>
        <include name="**/*.css"/>
        <include name="**/*.rdfs" />
        <include name="**/*.rdf" />
        <include name="**/*.owl" />
        <include name="**/*.properties"/>
        <include name="tufts/vue/resources/**"/>
        <include name="tufts/vue/images/**"/>
        <include name="tufts/vue/gui/icons/**"/>
      </fileset>
      <fileset dir="${build.class}">
    	<exclude name="edu/tufts/osidimpl/**"/>
      </fileset>
      <indexjars>
      	<fileset dir="${lib.home}"/>	
      </indexjars>
    </jar>
  </target>	
  <target name="sign-applet-jars">
 	<signjar
	  	alias="mykey"
	  	storepass="vuevue"
	  	keystore="${keystore}"
	  	jar="${vue-core.jar}">
	</signjar>
  	<signjar
  		alias="mykey"
  		storepass="vuevue"
  		keystore="${keystore}"
  		jar="${vue.jar}">
    </signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/google-collect-snapshot-20090211.jar">
  	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/jaxrpc-api-unsigned.jar">
  	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/MITAuthenticationTypes.jar">
  	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/MITRepositoryTypes.jar">
  	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/jena-2.5.3.jar">
  	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/OsidProvider.jar">
  	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/commons-discovery.jar">
  	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/castor-1.3-core.jar">
  	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/castor-1.3-xml.jar">
  	</signjar>
 	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/xercesImpl-2.7.1.jar">
	</signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/commons-logging.jar">
    </signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/commons-lang-2.4.jar">
    </signjar>
  	<signjar
  	  alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/MITSearchTypes.jar">
  	</signjar>
  	<signjar
      alias="mykey"
  	  storepass="vuevue"
  	  keystore="${keystore}"
  	  jar="../lib/VUE-MacOSX.jar">
    </signjar>
  	<signjar
      alias="mykey"
      storepass="vuevue"
      keystore="${keystore}"
  	  jar="../lib/looks-2.1.4.jar">
    </signjar>
  </target>
  <target name="run-jar-core-old">
    <jar zipfile="${vue-core.jar}" update="true" compress="false" index="true">
      <fileset dir="${src}" includes="**/*.xml"/>
      <fileset dir="${src}" includes="**/*.conf"/>
      <fileset dir="${src}" includes="**/*.properties"/>
      <fileset dir="${src}" includes="tufts/vue/resources/**"/>
      <fileset dir="${src}" includes="tufts/vue/images/**"/>	
      <fileset dir="${build.class}"/>
    </jar>
  </target>

  <target name="check-third-party-jars-against_VUE.jar">
    <!-- This target will set the property "vue.jar.current" if the support libraries that go into VUE.jar are 
         already older than the current VUE.jar (meaning, we don't need to rebuild VUE.jar) -->
    <uptodate property="vue.jar.current" targetfile="${vue.jar}">
      <srcfiles dir="${lib.home}" includes="${thirdparty.jarfiles.names}"/>
      <srcfiles dir="." includes="${vue-core.jar}"/>
    </uptodate>
  </target>
  
  <target name="jar"
          depends="jar-core,check-third-party-jars-against_VUE.jar" unless="vue.jar.current"
          description="Create VUE.jar - a single, distributable, runnable jar file containing VUE and all supporting libraries.">
  	     <!-- Create our packer task -->
  	<!--     <taskdef name="pack200"
  	    	classname="com.sun.tools.apache.ant.pack200.Pack200Task"
  	    	classpath="${lib.home}/Pack200Task.jar"/>
	-->
  	     <!-- Create our unpacker task -->
  	 <!--    <taskdef name="unpack200"
  	    	classname="com.sun.tools.apache.ant.pack200.Unpack200Task"
  	    	classpath="${lib.home}/Pack200Task.jar"/>
	-->
    <tstamp/>
    <echo message="Building ${vue.jar}..."/>
    <jar destfile="${vue.jar}" compress="true" index="true" update="false" duplicate="preserve">
        <manifest>
        <attribute name="Description" value="Tufts VUE 1.x (Visual Understanding Environment)"/>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built" value="${TODAY} ${TSTAMP}"/>
        <attribute name="Build-Platform" value="${os.name} ${os.version} ${os.arch}"/>
        <attribute name="Main-Class" value="tufts.vue.VUE"/>
      </manifest>
        <!-- zipfileset src="${basedir}/VUE-core.jar" excludes="**/*.properties"/ example excludes that works for one file -->
        <zipfileset src="${vue-core.jar}"/>
        <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names}"
        	excludes="org/apache/tools/ant/**"/>
    	<zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names.extendedFeatures}"
    	  	        	excludes="org/apache/tools/ant/**"/>
        <!-- may be able to modify this to exclude README's, .txt files, etc -->
    </jar>
    <jar jarfile="${vue.jar}"
         basedir="${basedir}" 
		 update="true"
         includes="osid.properties"/>
  	 
  

  </target>
  <target name="linux-jar" depends="compile-linux,jar">
    <!--
    <echo message="Building linux jar..."/>
    <copy file="${vue.jar}" tofile="${vue-linux.jar}"/>
    <jar jarfile="${vue-linux.jar}"
    	 basedir="${linux.class}"
    	 update="true"
    	 />
    -->
  </target>
  <target name="jar-narravision" depends="jar"
          description="Create NarraVision.jar - a single, distributable, runnable jar file containing NarraVision and all supporting libraries.">
    <tstamp/>
    <echo message="Building ${narravision.jar}..."/>
    <jar destfile="${narravision.jar}" compress="true" index="true" update="false" duplicate="preserve">
      <manifest>
        <attribute name="Description" value="MIT NarraVision Alpha (Derivative of Tufts VUE: Visual Understanding Environment)"/>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built" value="${TODAY} ${TSTAMP}"/>
        <attribute name="Build-Platform" value="${os.name} ${os.version} ${os.arch}"/>
        <attribute name="Main-Class" value="tufts.vue.VUE"/>
      </manifest>
      <zipfileset src="${vue-core.jar}"/>
      <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names}"/>
      <zipfileset src="${lib.home}/BlackShipsImages.jar"/> <!-- try exporting blackships startup file as a vue zip archive... -->
      <!-- zipfileset src="${build.home}/VUE.jar"/>  this is a crazy slow method of doing this: it's file compressed from 50mb -->
      
    </jar>
  </target>


  <target name="jar-lib"
          description="Create VUE-lib.jar - a separate jar file containing the kitchen-sink set of third party libraries to run VUE (dev convenience target).">
    <!-- Note: this pathcovert is for the debug output only.  It isn't used in the zipping... -->
    <pathconvert pathsep=" " property="info.jarfiles" refid="thirdparty.jarfiles.classpath"/>
    <echo message="Jarring: ${info.jarfiles}"/>
    <!-- There is a bunch of of crap in the lib file we really don't need: figure out how to exclude. -->
    <!-- Stuff like .java sources, .html files and .txt files, and from axis-ant.jar, a big fat js.jar (javascript) & bsf.jar files? -->
    <!-- Also: do we really need the /hyph/*.hyp files?  Are these Hyphenation Dictionaries? -->
    <jar destfile="${vue-lib.jar}" compress="false" index="true" update="false" duplicate="preserve">
      <!-- zipgroupfileset is extremely picky and limited: each one can name one dir & one string representing names from that dir,
        and cannot include sub-items, such as a filelist, which would have been a bit cleaner for an ordered set of jar files. -->
      <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names}"/>
      <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names.extendedFeatures}"/>
    </jar>
  </target>

  <target name="jar-lib-minimal"
          description="Create VUE-lib-minimal.jar - a jar file containing the minimal set libraries to run VUE (testing).">
    <echo message="Jarring: ${thirdparty.jarfiles.names.minimal}"/>
    <jar destfile="VUE-lib-minimal.jar" compress="true" index="true" update="false">
      <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names.minimal}"/>
    </jar>
  </target>
  
  <target name="mac-lib" depends="prepare"
          description="Create the library containing Mac OS X specific VUE code (Mac OS X platform build only)">
    <!-- Build for stuff that makes use of the Apple com.apple.cocoa.{application,foundation}.* classes
         that reside in /System/Library/Java in Mac OS X, which can access native OS X features via
         classes such as NSWindow, NSApplcation, etc. -->
    <mkdir dir="maclib/classes"/>
    <javac srcdir="${basedir}" 
           destdir="maclib/classes"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           classpath="/System/Library/Java"
           source="${target.version}"
           target="${target.version}"
           >
      <include name="maclib/**/*.java"/>
    </javac>
    <jar destfile="${lib.home}/VUE-MacOSX.jar" compress="true" index="false" update="false">
      <fileset dir="maclib/classes" includes="tufts/macosx/**"/>
    </jar>
  </target>
  <target name="mac-lib-safe" depends="prepare"
          description="Create a minimal library containing Mac OS X specific noop calls for building w/out the deprecated cocoa classes">
    <!-- Build for stuff that makes use of the Apple com.apple.cocoa.{application,foundation}.* classes
         that reside in /System/Library/Java in Mac OS X, which can access native OS X features via
         classes such as NSWindow, NSApplication, etc. -->
    <mkdir dir="maclib/classes"/>
    <javac srcdir="${basedir}" 
           destdir="maclib/classes"
             debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           listfiles="yes"
           classpath="${lib.home}/log4j-1.2.12.jar"
           source="${target.version}"
           target="${target.version}"
           >
      <include name="maclib/MacOSX16Safe.java"/>
      <include name="maclib/MacOSX.java"/>
    </javac>
    <jar destfile="${lib.home}/VUE-MacOSX.jar" compress="true" index="false" update="false">
      <fileset dir="maclib/classes" includes="tufts/macosx/**"/>
    </jar>
  </target>
     
  <target name="all" depends="clean,mac-dist,linux-jar" description="Rebuild everything from scratch."/>
  <target name="vue-applet" depends="jar-core">
	

  	    <tstamp/>
  	    <echo message="Building ${vueapplet.jar}..."/>
  	    <jar destfile="${vueapplet.jar}" compress="true" index="true" update="false" duplicate="preserve">
  	        <manifest>
  	        <attribute name="Description" value="Tufts VUE 3.x (Visual Understanding Environment)"/>
  	        <attribute name="Built-By" value="${user.name}"/>
  	        <attribute name="Built" value="${TODAY} ${TSTAMP}"/>
  	        <attribute name="Build-Platform" value="${os.name} ${os.version} ${os.arch}"/>
  	        <attribute name="Main-Class" value="tufts.vue.VUE"/>
  	      </manifest>
  	        <!-- zipfileset src="${basedir}/VUE-core.jar" excludes="**/*.properties"/ example excludes that works for one file -->
  	        <zipfileset src="${vue-core.jar}"/>
  	        <zipgroupfileset dir="${lib.home}" includes="${thirdparty.jarfiles.names}"
  	        	excludes="org/apache/tools/ant/**"/>
  	        <!-- may be able to modify this to exclude README's, .txt files, etc -->
  	    </jar>
  	    <jar jarfile="${vueapplet.jar}"
  	         basedir="${basedir}" 
  			 update="true"
  	         includes="osid.properties"/>
  	  	 
  	  


  	<signjar
  	    alias="mykey"
  	    storepass="vuevue"
  		keystore="${keystore}"
  		jar="${vueapplet.jar}">
  	</signjar>
  	
  	<!--
    <pack200 src="${vueapplet.jar}"
    		 destfile="${vue-pack.jar}"
    		 effort="9"
    	 	 modificationtime="latest"
    		 deflatehint="false"
    		 unknownattribute="error"
  			 verbose="1"
 	/> -->
  </target>
  <target name="mac" depends="clean,mac-dist"/>

  <target name="clean"
          description="Delete all build and intermediate files, leaving only the sources.">
    <delete dir="${build.home}"/>
    <delete dir="${linux.class}"/>
    <delete file="${vue-core.jar}"/>
    <!--delete file="VUE-lib.jar"/-->
    <delete file="VUE-lib-minimal.jar"/>
  </target>
  
  <target name="clean2"
          description="Delete all build and intermediate files, leaving only the sources, but leave build directory">
    <delete dir="${build.home}/classes"/>
    <delete dir="${build.home}/VUE.app"/>
    <delete file="${build.home}/VUE.jar"/>
    <delete dir="${linux.class}"/>
    <delete file="${vue-core.jar}"/>
</target>

  <target name="clean-emacs">
    <delete verbose="true">
      <fileset dir="." defaultexcludes="no" includes="**/*~"/>
    </delete>
  </target>

  <target name="clean-logs">
    <delete verbose="true">
      <fileset dir="." defaultexcludes="no" includes="**/*.log"/>
    </delete>
  </target>
 

  <target name="mac-dist" depends="jar" description="Creates a Mac OS X distributable Applcation directory for VUE">
      <taskdef name="bundleapp"               
              classpath="${lib.home}/appbundler-1.0ea.jar"
              classname="com.oracle.appbundler.AppBundlerTask"/>
      <mkdir dir="build/${MacDist}"/>      

       <!-- Obtain path to the selected JRE -->
      <exec executable="/usr/libexec/java_home"
        failonerror="true"
        outputproperty="runtime">
         <arg value="-v"/>
         <arg value="15"/>
      </exec>
      <property environment="env" />
      <bundleapp 
                outputdirectory="build/${MacDist}"
                name="VUE"
                displayname="VUE"
                executableName="VUE"
                identifier="tufts.vue.VUE"
                shortversion="${version}"
                version="${version}"
                icon="MacOS/VUE.icns"
                mainclassname="tufts.vue.VUE"
                copyright="2003-2020"
                applicationCategory="public.app-category.finance">
                <classpath file="${build.home}/VUE.jar"/>
                <option value="-Dapple.laf.useScreenMenuBar=true"/>
                <option value="-Dcom.apple.macos.use-file-dialog-packages=true"/>
                <option value="-Dcom.apple.macos.useScreenMenuBar=true"/>
                <option value="-Dapple.awt.application.name=VUE"/>
                <option value="-Dsun.java2d.d3d=false"/>
                <option value="-Dcom.apple.smallTabs=true"/>
                <option value="-Dfile.encoding=UTF-8"/>
                <option value="-Xmx4096M"/>
                  <runtime dir="${runtime}" />

      </bundleapp>
  </target>

    <target name="test" depends="mac-dist"/>


    <taskdef name="jarbundler"
             classpath="${lib.home}/jarbundler-2.4.0.jar" 
             classname="net.sourceforge.jarbundler.JarBundler"/>

    <target name="version">
      <tstamp/>
	  <!-- generate file into src tree - peter 21-Jul-06 -->
	  <echo file="${basedir}/tufts/vue/Version.java">
// generated by ${ant.file}
package tufts.vue;
/** generated by ${ant.file} ${TODAY} ${TSTAMP} */
public final class Version {
/** ${TODAY} at ${TSTAMP} by ${user.name} on ${os.name} ${os.version} ${os.arch} JVM ${java.runtime.version} */
public static final String
        Date = "${TODAY}",
        Time = "${TSTAMP}",
        User = "${user.name}",
        Platform = "${os.name} ${os.version} ${os.arch}",
        JVM = "${java.runtime.version}(bits=${sun.arch.data.model})",
        AllInfo = "${TODAY} at ${TSTAMP} by ${user.name} on " + Platform + " JVM " + JVM,
        WhatString = "@(#)VUE: built " + AllInfo;
}
</echo>
<!-- Compile file as part of regular compile target - peter 21-Jul-06  
	<javac srcdir="${build.home}" 
           destdir="${build.class}"
           optimize="${compile.optimize}"
           listfiles="yes"
           >
      <include name="Version.java"/>
    </javac>   -->
    </target>
    
    <target name="versionOld">
      <exec outputproperty="datestr" executable="date">
        <arg value="+%B %e, %Y"/></exec>
      <buildnumber/>
      <echo file="version.java">
package tufts.vue;
cclass Version {
        static final String buildDay = "${datestr}";
        static final String buildTime = "${datestr}";
        static final String buildNumber = "${build.number}";
}
      </echo>
    </target>
    

<!-- ==================== Tasks to run VUE  ================================ -->

    <target name="vue" depends="" description="Run the VUE application">
      <java classname="tufts.vue.VUE" failonerror="true" fork="true">
        <!--jvmarg value="-verbosegc"/-->
        <!-- Start with min of 10MB (VUE uses this much just starting up) -->
        <jvmarg value="-Xms10m"/>
        <!-- Increase max allowed memory from default 64MB to 2GB -->
        <jvmarg value="-Xmx2048m"/>
	<!-- Set prefs to user directory -->
	<jvmarg value="-Djava.util.prefs.userRoot=/home/${user.name}/.java"/>
	<jvmarg value="-Djava.util.prefs.systemRoot=/home/${user.name}/.java"/>
	<!-- Below wo JVM args are for the Mac runtime, and will be ignored on Windows. -->
        <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
        <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUE"/>
        <arg value="${vue.args}"/>
        <classpath refid="runtime.classpath"/>
      </java>
    </target>
	 <target name="vue_fr" depends="" description="Run the VUE application">
	      <java classname="tufts.vue.VUE" failonerror="true" fork="true">
	      	<jvmarg value="-Duser.language=fr" />
	      	<jvmarg value="-Duser.region=FR" />
	        <!--jvmarg value="-verbosegc"/-->
	        <!-- Start with min of 10MB (VUE uses this much just starting up) -->
	        <jvmarg value="-Xms10m"/>
	        <!-- Increase max allowed memory from default 64MB to 2GB -->
	        <jvmarg value="-Xmx1024m"/>
	        <!-- Below wo JVM args are for the Mac runtime, and will be ignored on Windows. -->
	        <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
	        <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUE"/>
	        <arg value="${vue.args}"/>
	        <classpath refid="runtime.classpath"/>
	      </java>
	    </target>
	    
    
     <target name="other" depends="" description="Run Other classes in VUE">
      <java classname="edu.tufts.osidimpl.repository.fedora_2_2.FedoraRESTSearchAdapter" failonerror="true" fork="true">
        <!--jvmarg value="-verbosegc"/-->
        <!-- Start with min of 10MB (VUE uses this much just starting up) -->
        <jvmarg value="-Xms10m"/>
        <!-- Increase max allowed memory from default 64MB to 2GB -->
        <jvmarg value="-Xmx1024m"/>
        <!-- Below wo JVM args are for the Mac runtime, and will be ignored on Windows. -->
        <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
        <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUE"/>
        <arg value="${vue.args}"/>
        <classpath refid="runtime.classpath"/>
      </java>
    </target>
    
    
    <target name="vue-vanilla" depends="" description="Run the VUE application (Do NOT install custom VUE Look and Feels)">
        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
          <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
          <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUE"/>
          <arg value="-skip_custom_laf"/>
          <classpath refid="runtime.classpath"/>
        </java>
    </target>
    
    <target name="vue-mac-metal" depends="" description="Run the VUE application (Mac Brushed Metal LAF)">
        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
          <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
          <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUE"/>
          <jvmarg value="-Dapple.awt.brushMetalLook=true"/>
          <classpath refid="runtime.classpath"/>
        </java>
    </target>

    <target name="vue-mac-metal-vanilla" depends="" description="Run the VUE application (Mac Brushed Metal LAF, No Customizations)">
        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
          <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
          <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUE"/>
          <jvmarg value="-Dapple.awt.brushMetalLook=true"/>
          <arg value="-skip_custom_laf"/>
          <classpath refid="runtime.classpath"/>
        </java>
    </target>

    <target name="vue-win-native" depends="" description="Run VUE - Windows Only (Windows Native LAF, No VUE Theme possible)">
        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
          <arg value="-nativeWindowsLookAndFeel"/>
          <classpath refid="runtime.classpath"/>
        </java>
    </target>
    
    <target name="vue-win-force-metal" depends="" description="Run VUE - Windows Only (Force the java 1.4 Metal Theme, skipping java 1.5 Ocean Theme)">
        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
          <arg value="-skip_ocean_theme"/>
          <classpath refid="runtime.classpath"/>
        </java>
    </target>
    
    <target name="vue-dr" depends="" description="Run just the VUE Digital Repository GUI">
        <java classname="tufts.vue.DRBrowser" failonerror="true" fork="true">
          <jvmarg value="-Xmx1024m"/>
          <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
          <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=VUEDR"/>
          <arg value="${vue.args}"/>
        <classpath refid="runtime.classpath"/>
        </java>
    </target>
    
    <target name="vue-nv" depends="" description="Run the NarraVision demo (Mac)">
      <pathconvert pathsep=":" property="classpath.nv" refid="runtime.classpath"/>
        <java classname="tufts.vue.VUE" failonerror="true" fork="true">
          <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
          <jvmarg value="-Dapple.awt.brushMetalLook=true"/>
          <jvmarg value="-Dcom.apple.mrj.application.apple.menu.about.name=NarraVision"/>
          <jvmarg value="-Dtufts.vue.features=NarraVision"/>
          <classpath>
            <path refid="runtime.classpath"/>
            <pathelement path="${lib.home}/BlackShipsImages.jar"/>
          </classpath>
        </java>
    </target>

    <target name="vuedemo" depends="all">
      <java classname="tufts.vue.VUE" failonerror="true" fork="true">
        <classpath refid="runtime.classpath"/>
      </java>
    </target>
	
    <target name="zotero">
    	<ant antfile="../ZoteroFFExtension/build.xml" dir="../ZoteroFFExtension/" target="createDistributionXPI-NoCompile"/>
 	</target>
	
    <!-- Tasks to create releases for VUE -->
    <target name="release" depends="clean,mac-dist,linux-jar,vue-applet,zotero">
        <delete dir="${release.home}"/>
        <mkdir dir="${release.home}"/>
        <zip destfile="${release.home}/VUE.zip">
            <zipfileset dir="${build.home}" includes="VUE.jar" filemode="755"/>
         </zip>
    	 <zip destfile="${release.home}/VUEApplet.zip">
    	            <zipfileset dir="${build.home}" includes="VUEApplet.jar" prefix="vueapplet" filemode="755"/>
    	 			<zipfileset dir="${build.home}/../../applet-samplehtml/" includes="**/*.*" prefix="vueapplet" filemode="755"/>
    	  </zip>
        <checksum file="${release.home}/VUEApplet.zip" property="appletMD5"/>
         <checksum file="${release.home}/VUE.zip" property="genericMD5"/>
         <zip destfile="${release.home}/VUE.app.zip">
           <zipfileset dir="${build.home}/${MacDist}"  includes="**/VUE.app/**" filemode="755"/>
         </zip>
         <checksum file="${release.home}/VUE.app.zip" property="macMD5"/>
         <zip destfile="${release.home}/VUE_src.zip">
<!--            <fileset dir="${lib.home}"/> -->
             <zipfileset dir="${basedir}/../." prefix="vue">
                <exclude name="**/release/*"/>
                <exclude name="Nullsoft-Installer/*"/>
                <exclude name="**/build/*"/>
                <exclude name="**/installer/*"/>
                <exclude name="**/altView/*"/>
                <exclude name="**/*.class"/>
                <exclude name="**/*.zip"/>
             </zipfileset> 
         </zip>
         <checksum file="${release.home}/VUE_src.zip" property="srcMD5"/>
         <!-- zip destfile="${release.home}/VUE-linux.zip">
	   <zipfileset dir="${build.home}" includes="VUE-linux.jar" filemode="755"/>
	 </zip>
         <checksum file="${release.home}/VUE-linux.zip" property="genericMD5"/ -->
         <echo file="${release.home}/checksum.txt" >
VUE.zip - ${genericMD5}
VUE.app.zip- ${macMD5}
VUE-Java16.app.zip- ${mac16MD5}
VUE_src.zip - ${srcMD5}     
VUEApplet.zip - ${appletMD5}
        </echo>
    </target>
    
   <target name="installers" depends="release,linux-jar">
          <taskdef name="nsis" classname="net.sf.nsisant.Task">
            <classpath location="${lib.home}/nsisant-1.2.jar"/>
           </taskdef>
		  <copy todir="${nullsoftjre.home}">
  			<fileset dir="${jre.home}"/>
	  	  </copy>

           <!--creating installer using nullsoft-->
           <nsis script="../Nullsoft-Installer/vue.nsi" verbosity="4" out="build.log" noconfig="yes"> 
           </nsis>
         
         <!-- copying and zipping windows installer -->   
         <delete dir="${basedir}/installer/Vue_Installer.zip"/>
         <copy file="../Nullsoft-Installer/VUE.exe" todir="${basedir}/installer"/>
           <zip destfile="${basedir}/installer/VUE_Installer.zip">
            <zipfileset dir="${basedir}/installer/" includes="VUE.exe" filemode="755"/>
         </zip>
	 
         <checksum file="${release.home}/VUEApplet.zip" property="appletMD5"/>
         <checksum file="${release.home}/VUE.zip" property="genericMD5"/>
         <checksum file="${release.home}/VUE.app.zip" property="macMD5"/>
         <checksum file="${release.home}/VUE_src.zip" property="srcMD5"/>
         <checksum file="${basedir}/installer/VUE_Installer.zip" property="installerMD5"/>
         <echo file="${release.home}/checksum.txt" >
VUE.zip - ${genericMD5}
VUE.app.zip- ${macMD5}
VUE_src.zip - ${srcMD5}     
VUEApplet.zip - ${appletMD5}
        </echo>
   	<copy file="../ZoteroFFExtension/dist/VUEZoteroFireFoxExtension.xpi" todir="${release.home}"/>

    </target>
    
    <!-- ==================== Debugging tasks  ================================ -->
    <target name="info" description="Display Library and Classpath Variables">
      <pathconvert pathsep="${line.separator}lib: " property="dist.jarfiles" refid="thirdparty.jarfiles.classpath"/>
      <pathconvert pathsep="  " property="info.classpath" refid="runtime.classpath"/>
      <pathconvert pathsep="  " property="info.compilepath.common" refid="compile.classpath.common"/>
      <pathconvert pathsep="  " property="info.compilepath.vue" refid="compile.classpath.vue"/>
      <echo message="DISTRIBUTION JAR FILES:${line.separator}${dist.jarfiles}"/>
      <echo message="RUNTIME CLASSPATH:         ${info.classpath}"/>
      <echo message="COMMON COMPILE CLASSPATH:  ${info.compilepath.common}"/>
      <echo message="TUFTS/VUE COMPILE CLASSPATH: ${info.compilepath.vue}"/>
      <echo message="ant.java.version: ${ant.java.version}"/>
    </target>

    <target name="info-jarlib">
      <echo message="Jar Library Extensions Info (jarlib-display test/example)"/>
      <jarlib-display>
        <fileset dir="${lib.home}" includes="${thirdparty.jarfiles.names}"/>
      </jarlib-display>
    </target>

<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">

    <mkdir          dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${basedir}"
                destdir="${dist.home}/docs/api"
    			maxmemory="512m"
           packagenames="edu.*,org.*,tufts.*">
      <classpath refid="compile.classpath.common"/>
    </javadoc>

  </target>

<!-- ==================== junit Target ================================== -->

  <target name="junit" depends="compile" description="Run JUnit tests">
    <available property="junit.present" classname="junit.framework.TestCase" >
      <classpath>
        <pathelement location="${junit.jar}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </available>    

  </target>
    
	
	<!-- ==================== URL encoding Test ================================ -->
    <target name="urltest" depends="compile" description="test URL encoding" >
        <java classname="tufts.vue.urltest" failonerror="true" fork="true">
      <classpath refid="runtime.classpath"/>
        </java>
    </target>

</project>
