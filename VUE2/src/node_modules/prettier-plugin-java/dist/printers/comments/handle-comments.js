"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleCommentsBinaryExpression = void 0;
var comments_utils_1 = require("./comments-utils");
function handleCommentsBinaryExpression(ctx) {
    moveOperatorLeadingCommentsToNextExpression(ctx);
    moveExpressionTrailingCommentsToNextOperator(ctx);
}
exports.handleCommentsBinaryExpression = handleCommentsBinaryExpression;
function moveOperatorLeadingCommentsToNextExpression(ctx) {
    var _a;
    var unaryExpressionIndex = 1;
    (_a = ctx.BinaryOperator) === null || _a === void 0 ? void 0 : _a.forEach(function (binaryOperator) {
        var _a;
        if ((0, comments_utils_1.hasLeadingComments)(binaryOperator)) {
            while (ctx.unaryExpression[unaryExpressionIndex].location.startOffset <
                binaryOperator.endOffset) {
                unaryExpressionIndex++;
            }
            // Adapt the position of the operator and its leading comments
            var shiftUp = binaryOperator.leadingComments[0].startLine -
                1 -
                binaryOperator.startLine;
            if (binaryOperator.startLine !==
                ctx.unaryExpression[unaryExpressionIndex].location.startLine) {
                binaryOperator.leadingComments.forEach(function (comment) {
                    comment.startLine += 1;
                    comment.endLine += 1;
                });
            }
            binaryOperator.startLine += shiftUp;
            binaryOperator.endLine += shiftUp;
            // Move binaryOperator's leading comments to the following
            // unaryExpression
            ctx.unaryExpression[unaryExpressionIndex].leadingComments =
                ctx.unaryExpression[unaryExpressionIndex].leadingComments || [];
            (_a = ctx.unaryExpression[unaryExpressionIndex].leadingComments).unshift.apply(_a, binaryOperator.leadingComments);
            delete binaryOperator.leadingComments;
        }
    });
}
function moveExpressionTrailingCommentsToNextOperator(ctx) {
    var binaryOperators = ctx.BinaryOperator;
    var binaryOperatorIndex = 1;
    if (binaryOperators === null || binaryOperators === void 0 ? void 0 : binaryOperators.length) {
        ctx.unaryExpression.forEach(function (unaryExpression) {
            var _a;
            var _b;
            if ((0, comments_utils_1.hasTrailingComments)(unaryExpression)) {
                while (binaryOperatorIndex < binaryOperators.length &&
                    unaryExpression.location.endOffset &&
                    binaryOperators[binaryOperatorIndex].startOffset <
                        unaryExpression.location.endOffset) {
                    binaryOperatorIndex++;
                }
                var binaryOperator = binaryOperators[binaryOperatorIndex];
                // Adapt the position of the expression and its trailing comments
                var shiftUp = unaryExpression.trailingComments[0].startLine -
                    1 -
                    unaryExpression.location.startLine;
                if (unaryExpression.location.startLine !== binaryOperator.startLine) {
                    unaryExpression.trailingComments.forEach(function (comment) {
                        comment.startLine += 1;
                        comment.endLine += 1;
                    });
                }
                unaryExpression.location.startLine += shiftUp;
                if (unaryExpression.location.endLine !== undefined) {
                    unaryExpression.location.endLine += shiftUp;
                }
                // Move unaryExpression's trailing comments to the following
                // binaryOperator
                binaryOperator.trailingComments = (_b = binaryOperator.trailingComments) !== null && _b !== void 0 ? _b : [];
                (_a = binaryOperator.trailingComments).unshift.apply(_a, unaryExpression.trailingComments);
                delete unaryExpression.trailingComments;
            }
        });
    }
}
