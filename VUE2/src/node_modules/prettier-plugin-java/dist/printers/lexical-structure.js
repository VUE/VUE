"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LexicalStructurePrettierVisitor = void 0;
var format_comments_1 = require("./comments/format-comments");
var prettier_builder_1 = require("./prettier-builder");
var base_cst_printer_1 = require("../base-cst-printer");
var doc_1 = require("prettier/doc");
var hardline = doc_1.builders.hardline;
var LexicalStructurePrettierVisitor = /** @class */ (function (_super) {
    __extends(LexicalStructurePrettierVisitor, _super);
    function LexicalStructurePrettierVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LexicalStructurePrettierVisitor.prototype.literal = function (ctx) {
        if (ctx.TextBlock) {
            var lines = ctx.TextBlock[0].image.split("\n");
            var open_1 = lines.shift();
            var baseIndent_1 = Math.min.apply(Math, lines.map(function (line) { return line.search(/\S/); }).filter(function (indent) { return indent >= 0; }));
            return (0, prettier_builder_1.join)(hardline, __spreadArray([
                open_1
            ], lines.map(function (line) { return line.slice(baseIndent_1); }), true));
        }
        if (ctx.CharLiteral || ctx.StringLiteral || ctx.Null) {
            return (0, format_comments_1.printTokenWithComments)(this.getSingle(ctx));
        }
        return this.visitSingle(ctx);
    };
    LexicalStructurePrettierVisitor.prototype.integerLiteral = function (ctx) {
        return (0, format_comments_1.printTokenWithComments)(this.getSingle(ctx));
    };
    LexicalStructurePrettierVisitor.prototype.floatingPointLiteral = function (ctx) {
        return (0, format_comments_1.printTokenWithComments)(this.getSingle(ctx));
    };
    LexicalStructurePrettierVisitor.prototype.booleanLiteral = function (ctx) {
        return (0, format_comments_1.printTokenWithComments)(this.getSingle(ctx));
    };
    return LexicalStructurePrettierVisitor;
}(base_cst_printer_1.BaseCstPrettierPrinter));
exports.LexicalStructurePrettierVisitor = LexicalStructurePrettierVisitor;
