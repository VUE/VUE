#-------------------------------------------------------
# CASTOR Properties File
#-------------------------------------------------------


#-----------------------------------------------------------------------------

# The Apache Crimson XML parser is generating BOGUS, yet unavoidable SAXParseExceptions
# when the input encoding doesn't match that which has been set, which is a problem in
# that VUE datasources.xml and InstalleDataSources.xml files, while they had their XML
# header encoding set, the stream encoding had never been set so all files out there are
# actual in the local encoding (e.g., MacRoman, Cp1252), which Apache Crimson complains
# about, nicely delcaring "this may not be an error", tho throwing an unignorable
# exception.  The exception does nicely inform you of the encoding found, which can be
# extracted and we can try again, but then furthermore, lets say the xml tag declared
# encoding is UTF-8 (as our existing files are), and the java stream encoding is then
# properly set to UTF-8: even then because the java internal name is "UTF8" w/out the
# dash, Crimson again denies us because it isn't an exactly matched encoding name!

# Not sure when this started becoming an issue, but we've been seeing a bug of having
# the datasoures.xml file get blown away since at least March 2009 (Jira VUE-1354)
# SMF 2009-04-21

#-----------------------------------------------------------------------------



#========================================================================================
# Comments from Castor 1.3 FAQ April 2009:
# http://www.castor.org/xml-faq.html
#-----------------------------------------------------------------------------

#-----------
# *** Is it true that the use of Castor XML mandates Xerces as XML parser?
#-----
# Yes and no. It actually depends. When requiring pretty printing during marshalling,
# Castor will internally use Apache's Xerces to implement this feature. As such, when
# not using this feature, Xerces is not a requirement, and any JAXP-compliant XML parser
# can be used (for unmarshalling).

# In other words, with the latter use case, you do not have to download (and use) Xerces separetely.

#-----------
# *** Do I still have to download Xerces when using Castor XML with Java 5.0?
#-----
# No. Starting with release 1.1, we have added support for using the Xerces instance as
# shipped with the JRE/JDK for serialization. As such, for Java 5.0 users, this removes
# the requirement to download Xerces separately when wanting to use 'pretty printing'
# with Castor XML during marshalling.

# To enable this feature, please change the following properties in your local
# castor.properties file (thus redefining the default value) as shown below:
#========================================================================================


# Defines the XML parser to be used by Castor.
# The parser must implement org.xml.sax.Parser.
org.exolab.castor.parser=org.xml.sax.helpers.XMLReaderAdapter

# Defines the (default) XML serializer factory to use by Castor, which must
# implement org.exolab.castor.xml.SerializerFactory; default is
# org.exolab.castor.xml.XercesXMLSerializerFactory
org.exolab.castor.xml.serializer.factory=org.exolab.castor.xml.XercesXMLSerializerFactory

# Defines the default XML parser to be used by Castor.
# org.exolab.castor.parser=com.sun.org.apache.xerces.internal.parsers.SAXParser

