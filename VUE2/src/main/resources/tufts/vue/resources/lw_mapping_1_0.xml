<?xml version="1.0" encoding="utf-8" ?> 
<mapping>
    <!-- Rectangle's default castor introspection produces a recursive
         loop (getBounds returns a Rectangle) that blows stack: this
         gets around it.  May need create also Rectangle2D.
      -->
  <!-- class name="java.awt.Rectangle">
    <field name="x" direct="true"><bind-xml node="attribute"/></field>
    <field name="y" direct="true"><bind-xml node="attribute"/></field>
    <field name="width" direct="true"><bind-xml node="attribute"/></field>
    <field name="height" direct="true"><bind-xml node="attribute"/></field>
  </class -->
  
  <class name="java.awt.geom.Point2D$Float">
    <map-to xml="point"/>
    <field name="x" direct="true"><bind-xml node="attribute"/></field>
    <field name="y" direct="true"><bind-xml node="attribute"/></field>
  </class>
  <class name="java.awt.Point">
    <map-to xml="pointi"/>
    <field name="x" direct="true"><bind-xml node="attribute"/></field>
    <field name="y" direct="true"><bind-xml node="attribute"/></field>
  </class>
  <!--class name="java.awt.geom.RectangularShape">
    <map-to xml="shape"/>
   
  </class -->
  <class name="tufts.vue.shape.RectangularPoly2D">
    <map-to xml="polygon"/>
    <field name="sides"><bind-xml node="attribute"/></field>
  </class>
  <class name="tufts.vue.shape.RectangularPoly2D$Triangle"><map-to xml="triangle"/></class>
  <class name="tufts.vue.shape.RectangularPoly2D$Diamond"><map-to xml="diamond"/></class>
  <class name="tufts.vue.shape.RectangularPoly2D$Hexagon"><map-to xml="hexagon"/></class>
  <class name="tufts.vue.shape.RectangularPoly2D$Pentagon"><map-to xml="pentagon"/></class>
  <class name="tufts.vue.shape.RectangularPoly2D$Octagon"><map-to xml="octagon"/></class>
  <class name="tufts.vue.shape.RoundRect2D"><map-to xml="roundRect"/>
    <field name="arcwidth" direct="true"><bind-xml node="attribute"/></field>
    <field name="archeight" direct="true"><bind-xml node="attribute"/></field>
  </class>
  <class name="java.awt.geom.Rectangle2D$Float">
    <map-to xml="rectangle"/>
    <field name="x"      direct="true" transient="true" type="float"><bind-xml node="attribute"/></field>
    <field name="y"      direct="true" transient="true" type="float"><bind-xml node="attribute"/></field>
    <field name="width"  direct="true" transient="true" type="float"><bind-xml node="attribute"/></field>
    <field name="height" direct="true" transient="true" type="float"><bind-xml node="attribute"/></field>
  </class>
  <class name="java.awt.geom.Ellipse2D$Float">
    <map-to xml="ellipse"/>
  </class>
  <class name="java.awt.geom.RoundRectangle2D$Float">
    <map-to xml="roundRect"/>
    <field name="arcwidth" direct="true"><bind-xml node="attribute"/></field>
    <field name="archeight" direct="true"><bind-xml node="attribute"/></field>
  </class>
  <!--
  <class name="tufts.vue.LWNode$NodeShape">
    <map-to xml="nodeShape"/>
    <field name="equalAspect" type="boolean">
      <bind-xml node="attribute"/>
    </field>
    <field name="shape">
      <bind-xml node="element"/>
    </field>
  </class>
  -->
  <class name="tufts.vue.LWComponent" identity="ID">
    <!-- castor can figure out types, we leave string as defaulted.
      -->
        <field name="ID"><bind-xml node="attribute"/></field>
		<field name="XMLlabel"><bind-xml name="label" node="attribute"/></field>
		<field name="XMLnotes"><bind-xml name="notes" node="element"/></field>
		<!-- field name="metaData"><bind-xml node="element"/></field -->
		<!-- field name="category"><bind-xml node="element"/></field -->
		<field name="resource" type="tufts.vue.Resource">
			<bind-xml name="resource" node="element"/>
		</field>
                
		<field name="x" type="float"><bind-xml node="attribute"/></field>
		<field name="y" type="float"><bind-xml node="attribute"/></field>
		<field name="width"><bind-xml name="width" node="attribute"/></field>
		<field name="height"><bind-xml name="height" node="attribute"/></field>
		<field name="XMLfillColor"><bind-xml name="fillColor" node="element"/></field>
		<field name="XMLstrokeColor"><bind-xml name="strokeColor" node="element"/></field>
		<field name="XMLtextColor"><bind-xml name="textColor" node="element"/></field>
		<field name="XMLfont" type="string"><bind-xml name="font" node="element"/></field>
		<field name="XMLhidden"><bind-xml name="hidden" node="attribute"/></field>
		<field name="strokeWidth" type="float"><bind-xml name="strokeWidth" node="attribute"/></field>
		<field name="autoSized" type="boolean"><bind-xml name="autoSized" node="attribute"/></field>
                <field name="nodeFilter"><bind-xml name="nodeFilter" node="element"/></field> 

                <!-- We can save a shape interface, but it won't restore properly -->
		<!-- field name="shape" type="java.awt.Shape">
			<bind-xml name="shape" node="element"/>
		</field -->
                <!-- -->
                <!--
                <field name="extraTags" set-method="addObject" type="java.lang.Object" collection="arraylist">
                        <bind-xml matches="*"/> 
                </field>
                -->
                
	</class>

	<class name="tufts.vue.LWContainer" extends="tufts.vue.LWComponent">
                <!--
                <field name="nodeList" type="tufts.vue.LWNode" collection="arraylist">
			<bind-xml name="node"/>
		</field>
                <field name="linkList" type="tufts.vue.LWLink" collection="arraylist">
			<bind-xml name="link"/>
		</field>
                -->
                <field name="XMLChildList" type="tufts.vue.LWComponent" collection="arraylist">
			<bind-xml name="child"/>
		</field>
	</class>
	
	<class name="tufts.vue.LWGroup" extends="tufts.vue.LWContainer">
		<map-to xml="group"/>
	</class>
	
	<class name="tufts.vue.LWNode" extends="tufts.vue.LWContainer">
		<map-to xml="node"/>
		<!-- field name="nodeShape">
			<bind-xml name="nodeShape" node="element"/>
		</field -->
		<field name="XMLshape">
                  <bind-xml name="shape" node="element"/>
		</field>
	</class>
	<class name="tufts.vue.LWImage" extends="tufts.vue.LWComponent">
		<map-to xml="image"/>
		<field name="offset">
			<bind-xml name="offset" node="element"/>
		</field>
	</class>
	
	<class name="tufts.vue.LWLink" extends="tufts.vue.LWComponent">
		<map-to xml="link"/>
	        <field name="headPoint">
			<bind-xml name="point1" node="element"/>
		</field>
	        <field name="tailPoint">
			<bind-xml name="point2" node="element"/>
		</field>
		<field name="persistHead">
			<bind-xml name="ID1" node="element" reference="true"/>
		</field>
	        <field name="persistTail">
			<bind-xml name="ID2" node="element" reference="true"/>
		</field>
	        <field name="controlCount">
			<bind-xml name="controlCount" node="attribute"/>
		</field>
	        <field name="arrowState">
			<bind-xml name="arrowState" node="attribute"/>
		</field>
                <!-- if isn't curved, these will be null, and thus not saved. so if this
                     is present, we know it's a curved link-->
	        <field name="ctrlPoint0">
			<bind-xml name="ctrlPoint0" node="element"/>
		</field>
	        <field name="ctrlPoint1">
			<bind-xml name="ctrlPoint1" node="element"/>
		</field>
	</class>

	<class name="tufts.vue.LWMap" extends="tufts.vue.LWContainer">
		<map-to xml="LW-MAP"/>
		<field name="userZoom">
			<bind-xml name="userZoom"/>
		</field>
		<field name="userOrigin">
			<bind-xml name="userOrigin" node="element"/>
		</field>
		<!-- field name="Pathways" type="tufts.vue.LWPathwayList" -->
		<field name="PathwayList">
			<bind-xml name="PathwayList" node="element"/>
		</field>
                <field name="author">
                    <bind-xml name="author" node="element"/>
                </field>
                <field name="date">
                    <bind-xml name="date"  node="element"/>
                </field>
                <field name="description">
                    <bind-xml name="description" node="element"/>
                 </field>
                 <field name="mapFilterModel">
                    <bind-xml name="mapFilterModel" node="element"/>
                 </field> 
                <field name="extraTags" set-method="addObject" type="java.lang.Object" collection="arraylist">
                  <bind-xml matches="*"/> 
                </field>
        
	</class>

	<class name="tufts.vue.LWPathwayList">
		<map-to xml="PathwayList"/>
		<field name="currentIndex" type="integer">
			<bind-xml name="currentPathway" node="attribute" />
		</field>
		<field name="revealerIndex" type="integer">
			<bind-xml name="revealerIndex" node="attribute" />
		</field>
		<field name="elementList" type="tufts.vue.LWPathway" collection="collection">
			<bind-xml name="pathway"/>
		</field>
	</class>
	
	<class name="tufts.vue.LWPathway" extends="tufts.vue.LWContainer">
		<map-to xml="pathway"/>
		<field name="currentIndex" type="integer">
			<bind-xml name="currentIndex" node="attribute"/>
		</field>
		<field name="locked" type="boolean">
			<bind-xml name="locked" node="attribute"/>
		</field>
		<field name="open" type="boolean">
			<bind-xml name="open" node="attribute"/>
		</field>
		<field name="elementIDList" type="string" collection="collection">
			<bind-xml name="id" />
		</field>
                <field name="elementPropertyList" type="tufts.vue.LWPathwayElementProperty" collection="collection">
                        <bind-xml name="ElementPropertyList" />
                </field>
	</class>
        
        <class name="tufts.vue.LWPathwayElementProperty">
                <field name="elementID" type="string">
                        <bind-xml name="id" node="attribute"/>
                </field>
                <field name="elementNotes" type="string">
                  <bind-xml name="pathwayNotes" node="attribute"/>
                  <!-- We save as an attribue instead of an element to
                       get around potential bugs in castor element
                       saves of long strings.
                    -->
                </field>
        </class>

        <class name="tufts.vue.filter.MapFilterModel" > 
            <map-to xml="mapFilterModel"/>
            <field name="keyVector" type="tufts.vue.filter.Key" collection="vector">
                <bind-xml name="key"/>
            </field>
         </class>
         
          <class name="tufts.vue.filter.NodeFilter" > 
            <map-to xml="nodeFilter"/>
            <field name="statementVector" type="tufts.vue.filter.Statement" collection="vector">
                <bind-xml name="statement"/>
            </field>
         </class>
     
         <class name="tufts.vue.filter.Key">
            <map-to xml="key"/>
            <field name="sKey" set-method="setKey" get-method="getKey" type="java.lang.Object" >
                <bind-xml name="sKey" node="element" />
             </field>
             <field name="defaultValue" type="java.lang.Object" >
                <bind-xml name="defaultValue" node="element" />
             </field>
              <field name="type" type="tufts.vue.filter.Type" >
                <bind-xml name="type" node="element" />
             </field>
         </class>
          <class name="tufts.vue.filter.DefaultType">
            <map-to xml="defaultType"/>
            <field name="displayName" type="string">
		<bind-xml name="displayName" node="element" />
	     </field>
             <field name="operatorList" set-method="setOperators" get-method="getOperators"  collection="vector">
             </field>
         </class>
         <class name="tufts.vue.filter.IntegerType" extends="tufts.vue.filter.DefaultType">
                <map-to xml="integerType"/>
         </class>
         <class name="tufts.vue.filter.StringType" extends="tufts.vue.filter.DefaultType">
            <map-to xml="stringType"/>
         </class>
          <class name="tufts.vue.filter.BooleanType" extends="tufts.vue.filter.DefaultType">
            <map-to xml="booleanType"/>
         </class>
         
         <class name="tufts.vue.PropertyEntry">
            <map-to xml="propertyEntry"/>
            <field name="entryKey" type="java.lang.String" >
                <bind-xml name="entryKey" node="element" />
            </field>
            <field name="entryValue" type="java.lang.Object" >
                <bind-xml name="entryValue" node="element" />
            </field>
         </class>

        
        <class name="tufts.vue.MapResource" extends="tufts.vue.URLResource"> </class>

	<class name="tufts.vue.URLResource">
		
		<field name="referenceCreated"  type="long">    <bind-xml name="referenceCreated" node="attribute"/></field>
		<field name="accessAttempted"   type="long">    <bind-xml name="accessAttempted" node="attribute"/></field>
		<field name="accessSuccessful"  type="long">    <bind-xml name="accessSuccessful" node="attribute"/></field>
		<field name="byteSize"          type="long">    <bind-xml name="size" node="attribute"/></field>
                
		<field name="spec" type="string" set-method="XML_setSpec" get-method="getSpec">
                  <bind-xml name="spec" node="element"/>
                </field>
                
		<field name="title"             type="string">  <bind-xml name="title" node="element"/></field>
	        <field name="clientType"        type="integer"><bind-xml name="type" node="element"/></field>

                <field name="propertyList" type="tufts.vue.PropertyEntry" collection="collection">
			<bind-xml name="property"/>
		</field>
                
                <!-- field name="propertyMap" collection="map">
			<bind-xml name="property"/>
		</field -->
                <!-- field name="propertyList" type="tufts.vue.PropertyList" node="element">
			<bind-xml name="resourcePropertyList"/>
		</field -->

		<!--
		<field name="castorFedoraObject" type="tufts.vue.CastorFedoraObject">
			<bind-xml name="castorFedoraObject" node="element"/>
		</field>
		-->
	</class>
	
	<class name="tufts.vue.AssetResource" extends="tufts.vue.URLResource">
		<field name="castorFedoraObject" type="tufts.vue.CastorFedoraObject">
			<bind-xml name="castorFedoraObject" node="element"/>
		</field>
	</class>
       
        <class name="tufts.vue.CabinetResource" extends="tufts.vue.URLResource">
            <map-to xml="cabinetResource"/>
            <!-- field name="extension" type="string">
                <bind-xml name="extension" node="element"/>
             </field -->
	</class>
		
		<!-- FEDORA OBJECTS -->
	<class name="tufts.vue.CastorFedoraObject">
		<field name="pid" type="string">
			<bind-xml name="pid" node="attribute"/>
		</field>
		<field name="fedoraType" type="string">
			<bind-xml name="fedoraType" node="element" />
		</field>
		<field name="displayName" type="string">
			<bind-xml name="displayName" node="element" />
		</field>
		<field name="CastorDR" type="tufts.vue.CastorDR">
			<bind-xml name="CastorDR" node="element"/>
		</field>
	</class>
	<class name="tufts.vue.CastorDR">
		<field name="id" type="string">
			<bind-xml name="id" node="attribute"/>
		</field>
		<field name="displayName" type="string">
			<bind-xml name="displayName" node="element" />
		</field>
		<field name="description" type="string">
			<bind-xml name="description" node="element" />
		</field>  
	   <field name = "address" type = "string">
			<bind-xml name ="address" node = "element" />
	   </field>
	   <field name = "userName" type = "string">
			<bind-xml name ="userName" node = "element" />
	   </field>
	   <field name = "password" type = "string">
			<bind-xml name ="password" node = "element" />
	   </field>
	   <field name="conf" type="string">
	   		<bind-xml name="conf" node="element" />
		</field>

	</class>
	

<!-- saving favorite nodes-->
	<class name="tufts.vue.SaveVueJTree">
		<map-to xml="SaveVueJTree" />
		<field name="saveTreeRoot" type="tufts.vue.SaveNode">
			<bind-xml name="SaveTreeRoot" node="element" />
		</field>
	</class>
	<class name="tufts.vue.SaveNode">
		<map-to xml="SaveNode" />
                <field name="resource" type="tufts.vue.Resource">
			<bind-xml name="resource" node="element"/>
		</field>
		
		<field name="children" type="tufts.vue.SaveNode" collection="vector">
			<bind-xml name="SaveNode" />
		</field>
	</class>
   
      

    <!--saving DataSourceViewer-->

<class name = "tufts.vue.SaveDataSourceViewer">
		<map-to xml ="SaveDataSourceViewer"/>
		
		<field name = "SaveDataSources" type = "tufts.vue.DataSource" collection = "vector">
			<bind-xml name ="dataSource" />
		</field>
		
</class>
<class name = "tufts.vue.BrowseDataSource">
       <map-to xml="tufts.vue.BrowseDataSource" />
       <field name="GUID" type="string">
         <bind-xml name="guid" node="element" />
       </field>
       
       <field name = "displayName" type = "string">
            <bind-xml name ="displayName" node = "element" />
       </field>
        
       <field name = "autoConnect" type = "boolean">
            <bind-xml name ="autoConnect" node = "attribute" />
       </field>
       
       <field name = "address" type = "string">
            <bind-xml name ="address" node = "element" />
       </field>
       
       <field name = "authenticationCookie" type = "string">
            <bind-xml name ="authentication" node = "element" />
       </field> 
 </class>
 
 <!-- class name="tufts.vue.GoogleDataSource" extends="tufts.vue.BrowseDataSource">
       <field name = "url" type = "string">
          <bind-xml name = "url" node = "element" />
       </field> 
  <field name = "client" type = "string">
          <bind-xml name = "client" node = "element" />
       </field>
       <field name = "site" type = "string">
          <bind-xml name = "site" node = "element" />
       </field> 
	</class !-->
 
 <class name="tufts.vue.LocalFileDataSource" extends="tufts.vue.BrowseDataSource"></class>
 <class name="tufts.vue.FavoritesDataSource" extends="tufts.vue.BrowseDataSource"></class>
 
 <!-- class name="tufts.vue.OsidDataSource" extends="tufts.vue.BrowseDataSource"></class -->
 <!-- class name="tufts.vue.Osid2DataSource" extends="tufts.vue.BrowseDataSource"></class -->
 <!-- class name="tufts.artifact.DataSource" extends="tufts.vue.BrowseDataSource"></class -->
 
<class name="tufts.vue.RemoteFileDataSource" extends="tufts.vue.BrowseDataSource">
      <field name = "UserName" type = "string">
          <bind-xml name = "UserName" node = "element" />
       </field>
       <field name = "password" type = "string">
          <bind-xml name = "password" node = "element" />
       </field>

	</class>

<!-- class name="tufts.vue.FedoraDataSource" extends="tufts.vue.BrowseDataSource">
  <field name = "UserName" type = "string">
    <bind-xml name = "UserName" node = "element" />
  </field>
       <field name = "password" type = "string">
         <bind-xml name = "password" node = "element" />
       </field>
</class -->
  
</mapping>
